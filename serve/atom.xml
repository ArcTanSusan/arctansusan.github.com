<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Jekyll Bootstrap</title>
 <link href="http://onceuponatimeforever.github.io/" rel="self"/>
 <link href="http://onceuponatimeforever.github.io"/>
 <updated>2014-05-13T20:50:48-07:00</updated>
 <id>http://onceuponatimeforever.github.io</id>
 <author>
   <name>Susan Tan</name>
   <email>susan.tan.fleckerl@gmail.com</email>
 </author>

 
 <entry>
   <title>How to run other people's Github pull requests locally</title>
   <link href="http://onceuponatimeforever.github.io/git,%20github,%20pull%20requests,%20workflow,%20process/2014/05/13/how-to-run-other-peoples-github-pull-requests-locally"/>
   <updated>2014-05-13T00:00:00-07:00</updated>
   <id>http://onceuponatimeforever.github.io/git,%20github,%20pull%20requests,%20workflow,%20process/2014/05/13/how-to-run-other-peoples-github-pull-requests-locally</id>
   <content type="html">
&lt;p&gt;I was very recently made a core committer to the open source OpenHatch.org Django website. Since Spring 2013, I&amp;rsquo;ve been contributing
code to OpenHatch.org, mostly on the UI/UX side and in some amounts of Python. One of the responsibilites as a core committer is that
I get to review the code of other contributors and when appropriate, approve their pull requests to be merged into the upstream repository.
I have full push access to the code repository.&lt;/p&gt;

&lt;p&gt;This article is about how to go about checking out someone else&amp;rsquo;s pull request locally. This is an epecially useful skill regardless of whether
or not you have push access to the upstream repository. Reading and reviewing other people&amp;rsquo;s code is a common and helpful thing to do
in software development.&lt;/p&gt;

&lt;p&gt;Github Support wrote &lt;a href=&quot;https://help.github.com/articles/checking-out-pull-requests-locally&quot;&gt;this excellent guide&lt;/a&gt; on how to check out
pull requests locally. Read through this Github article carefully before proceeding with the rest of this post.&lt;/p&gt;

&lt;p&gt;First of all, what is a pull request? In the Github world, a pull requests is a technically a branch from someone else&amp;rsquo;s fork of the upstream
repository and the branch represents one or more commits that the contributor wants to merge into the upstream repository. The
Github Support guide was written for the project leaders in mind, rather than for the contributor-who-was-granted-push-access to
the upstream repo. In the article, the &amp;ldquo;origin&amp;rdquo; actually refers to the upstream master repository. So, if you have a fork
of an upstream repo, what do you need to do for your git configuration setup? Below are my step-by-step modifications:&lt;/p&gt;

&lt;h1 id=&quot;modifying-your-git-configuration&quot;&gt;Modifying your Git Configuration&lt;/h1&gt;

&lt;p&gt;Open your &lt;code&gt;.git/config&lt;/code&gt; file in your editor and locate the section for your GitHub remote. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
[remote &quot;upstream&quot;]
    url = https://github.com/openhatch/oh-mainline.git
    fetch = +refs/heads/*:refs/remotes/upstream/*
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to add an extra line to this section so that it now looks like this:&lt;/p&gt;

&lt;p&gt;[remote &amp;ldquo;upstream&amp;rdquo;]
    url = https://github.com/openhatch/oh-mainline.git
    fetch = +refs/heads/&lt;em&gt;:refs/remotes/upstream/&lt;/em&gt;
    fetch = +refs/pull/&lt;em&gt;/head:refs/pull/upstream/&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We told Git that we would like to fetch remote references of the upstream repo that match the pattern &lt;code&gt;refs/pull/*/head&lt;/code&gt; and write them
as local references that match the pattern &lt;code&gt;refs/pull/origin/*&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we can fetch all the pull requests from the upstream repo:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git fetch upstream
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll get a massive stream of pull requests that are now rewritten locally in the format of &lt;code&gt;refs/pull/upstream/&amp;lt;PR_number&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;checking-out-a-particular-pull-request&quot;&gt;Checking out a particular pull request&lt;/h1&gt;

&lt;p&gt;You should now be able to check out a pull request in your local repo as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git checkout -b 999 pull/upstream/999
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can test this person&amp;rsquo;s branch by running a local server or running a test suite to make sure all the tests pass.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>I'm joining Piston Cloud</title>
   <link href="http://onceuponatimeforever.github.io/2014/04/30/im-joining-piston-cloud"/>
   <updated>2014-04-30T00:00:00-07:00</updated>
   <id>http://onceuponatimeforever.github.io/2014/04/30/im-joining-piston-cloud</id>
   <content type="html">
&lt;p&gt;Dear Readers,&lt;/p&gt;

&lt;p&gt;As you know, I left my former Java web engineer job at Flixster &amp;amp; Rotten Tomatoes on April 7, 2014 in pursuit of a job in the language that I’m in love with — &lt;strong&gt;Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Today I’m happy to announce that I’m joining the backend engineering team at &lt;a href=&quot;http://www.pistoncloud.com/press-releases/piston-named-one-of-the-top-10-best-places-to-work-in-the-san-francisco-bay-area/&quot;&gt;&lt;strong&gt;Piston Cloud&lt;/strong&gt;&lt;/a&gt; in San Francisco. I’ll be working on a private cloud-compute system built underneath Open Stack. This technology is pushing the boundaries of what is possible with distributed systems engineering and scalable VMs. The backend system is 100% in Python, of course. I will be a Django backend engineer, a distributed systems engineer, and a front-end Javascript engineer. I’ll start off in the first role as a backend engineer, working on the Django web application, and eventually in the long-term, I will occupy all three roles and wear many fancy hats. Exciting! I’ll learn a ton in the process. Occasionally, I’m expected to contribute back to Open Stack, so there will be even more Python open source in my life.&lt;/p&gt;

&lt;p&gt;I’m joining an engineering team of less than 25 engineers at this early-stage cloudy startup. Accumulatively, this team has a grant total of 200 years of experience in software engineering, architecture, management, and cloud computing systems. In fact, the co-founders and senior management of this company are the original early engineers of Open Stack itself back when it was an experimental research project that grew from R+D at NASA. A number of the engineering managers also happen to be PSF board members.&lt;/p&gt;

&lt;p&gt;I really love this team’s culture. The employees literally do wear fancy hats at work. They show up at the Open Stack Global Summit in formal three-piece suits and cocktail dresses. They go to tea parties, tea tastings, and wine tastings together. Perfect culture fit.&lt;/p&gt;

&lt;p&gt;From,&lt;/p&gt;

&lt;p&gt;Susan Tan&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Useful Git Tips From a Frequent Git User</title>
   <link href="http://onceuponatimeforever.github.io/2013/12/29/useful-git-tips-from-a-frequent-git-user"/>
   <updated>2013-12-29T00:00:00-08:00</updated>
   <id>http://onceuponatimeforever.github.io/2013/12/29/useful-git-tips-from-a-frequent-git-user</id>
   <content type="html">
&lt;p&gt;If you’re working on open-source projects created anytime in the past 5 to 7 years, there is a very high chance you’ll have to learn the version control system known as Git and the code storage and review site known as Github.&lt;/p&gt;

&lt;p&gt;I’ve been working with git version control very frequently at both my workplace and on open-source projects. Here are some useful things I’ve learned about git.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Everything on git is reversible. Every mistake can be reversed. Don’t be afraid of making mistakes. The intention of the technology behind git is to encourage branching and experimentation. Branches can easily be deleted, merged into other branches, pushed to a remote origin on Github, copied, cherry-picked.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s say you make a commit and push a large number of files. Then you realize that the commit you’ve just made contains a file that should not belong there.You need to discard 1 or more files from that commit. Use &lt;code&gt;git reset —soft HEAD^&lt;/code&gt; to place the most-recently committed files back into the staging area. Optional: If you want to be more specific about the commit, replace the term &lt;code&gt;HEAD^&lt;/code&gt; with the hash-code of the specific commit that you want to bring into the staging area.&lt;/p&gt;

&lt;p&gt;Do &lt;code&gt;git status&lt;/code&gt; to see the changed files in the staging area. Then do &lt;code&gt;git reset HEAD file_name&lt;/code&gt;, where &lt;code&gt;file_name&lt;/code&gt; is the path to the file name that you want to leave out of the commit. Then, add all the new changes into the staging area by typing &lt;code&gt;git add .&lt;/code&gt; and commit the new change.&lt;/p&gt;

&lt;p&gt;What happens when you realize that you want to permanently un-do the changes that you’ve made since your last commit? Do a &lt;code&gt;git reset —hard&lt;/code&gt; and you’re back in your previous commit.&lt;/p&gt;

&lt;p&gt;There are other ways to un-do commits you’ve done a while back. Git commands such as&lt;code&gt;git reset —hard commit-hash&lt;/code&gt;, &lt;code&gt;git reset —soft commit-hash&lt;/code&gt;, &lt;code&gt;git reflog&lt;/code&gt;, &lt;code&gt;git revert commit-hash&lt;/code&gt; helps to reverse or un-do changes in the staging area and commit history. No commit is permament when you use git; every commit is reversible.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You can re-write history. Interactive rebasing, or the proces of squashing or editing commits, allows you to clean up the git history on your local branch. Instead of having a dozen commits and a dozen commit messages that go with them, you can rebase the last 12 commits, and squash them all into one clean commit with one descriptive commit message. I highly recommend this git process if you’re working on a large project. A single pull request that contains 1 cleaned-up commit instead of 6 separate commits to resolve a ticket will look a lot cleaner in the commit history.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can make branches and do cool stuff with them. Like merging branches or making branches out of other branches. Or cherrypicking commits onto
from one branch to other branches. The git workflow encourages experimentation of different versions of code. Branches are useful for publishing. You can publish branches to Github for code-review with other people. Github keeps a record of diffs, or comparisons, between various branches, which is very useful for doing code reviews.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Part 3: Frustrating Weird Things About Java From a Beginner Java Coder</title>
   <link href="http://onceuponatimeforever.github.io/2013/12/29/part-3-frustrating-weird-things-about-java-from-a-beginner-java-coder"/>
   <updated>2013-12-29T00:00:00-08:00</updated>
   <id>http://onceuponatimeforever.github.io/2013/12/29/part-3-frustrating-weird-things-about-java-from-a-beginner-java-coder</id>
   <content type="html">
&lt;p&gt;Here’s a summary of basic hasmap or dictionary operations in Java. You have to first declare a dictionary like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java
HashMap&amp;lt;Integer, String&amp;gt; map = new HashMap();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, you can add keys and their associated values into the dictionary like so:
&lt;code&gt;java
        map.put(5, &quot;Five&quot;);
        map.put(6, &quot;Six&quot;);
        map.put(6,&quot;hello&quot;);
        map.put(7, &quot;Seven&quot;);
        map.put(8, &quot;Eight&quot;);
        map.put(9, &quot;Nine&quot;);
        map.put(10, &quot;Ten&quot;);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And you can get a value using a dictionary’s key:
&lt;code&gt;java
    String text = map.get(6); //get key 6
    System.out.println(text); //prints out that value &quot;Six&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The expression for iterating over a dictionary in Java is totally weird and makes no sense at all. To iterate over a dictionary, you do the following:
&lt;code&gt;java
 for (Map.Entry&amp;lt;Integer, String&amp;gt; entry:map.entrySet()) {
     //OMG. Why is this syntax so weird?
            int key = entry.getKey();
            String value = entry.getValue();
            System.out.println(key + &quot; value:&quot; + value);
        }
&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Part 2: Frustrating Weird Things About Java From a Beginner Java Coder</title>
   <link href="http://onceuponatimeforever.github.io/2013/12/29/part-2-frustrating-weird-things-about-java-from-a-beginner-java-coder"/>
   <updated>2013-12-29T00:00:00-08:00</updated>
   <id>http://onceuponatimeforever.github.io/2013/12/29/part-2-frustrating-weird-things-about-java-from-a-beginner-java-coder</id>
   <content type="html">
&lt;p&gt;The learning and frustration continues as I learn more beginner Java this week. I come from a Python background, a high-level dynamic language that had OO features implemented as an after-thought. The road to learning the OO language Java has been not quite as easy as it should be. This blog post as well as the previous one details some of those pain points in my learning process.&lt;/p&gt;

&lt;p&gt;I learned some interesting facts about Java:
* Every object inherits from the Object class, which contains in-built methods such as clone(), equals(), finalize(),hasCode(), toString().
* Java has in-built decorators such as @Override, which is a shortcut for over-ride a method from a parent class. You should not override variables, but instead override methods.
* Learning interfaces at Java: packages and how to import them, how to make worldwide unique package names.
* The differences between the abstract class inheritance vs. the interface class inheritance and in what cases you should use each. Abstract class inheritance for specifying NATURE of the object, while interface class inheritance is for specifying CAPABILITY of object. Many stackoverflow discussions have been written just on this topic itself.
* The eternal pains of Comparison Equality.
    The “==” doesn’t  work like it should work in Java. But, NO, it does not! Instead, we have to use the “equals” method. So I tried that to compare two perfectly identical new objects with the same attributes. The result was stilll False. GAH. Lastly, what ultimately worked was to use the hashCode and equala() generator in Java creates @Override decorator function. Subsequently, this mess of code is automatically created for me after right-clicking Source —&amp;gt;Generate hashCode and Equals():&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
@Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        Person other = (Person) obj;
        if (name == null) {
            if (other.name != null) return false;
        } else if (!name.equals(other.name)) return false;
        return true;
    }
All that just to compare two objects to see if they are the same. Then, I use the equals method in a class called “App’, just like before:
public class App {
    public static void main(String[] args) {
        Person person1 = new Person(8 ,&quot;Bob&quot;);
        Person person2 = new Person(8,&quot;Bob&quot;);
        System.out.println(person1.equals(person2));
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And it finally returned “true”.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java
The “==” works fine for comparing two integers, but it doesn’t work for doubles. The “==” points to the same object for integers, but points to 2 different objects if they’re doubles. What a pain. Here’s the example:
      Integer num1 = 6;
      Integer num2 = 6;
      System.out.println(num1 == num2); // prints true
      Double value1 = 7.2;
      Double value2 = 7.2;
      System.out.println(value1 == value2); //prints false
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, how do you get the double values to be compared as true? The solutions is to use the equals method. Instead of “System.out.println(value1 == value2);”, use “System.out.println(value1.equals(value2));”&lt;/p&gt;

&lt;p&gt;Then, the world is turned upside-down again when you try to compare two identical strings using “==”. Gah.&lt;/p&gt;

&lt;p&gt;More frustrations to follow in Part 3.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Part 1: Frustrating Weird Things About Java From a Beginner Java Coder</title>
   <link href="http://onceuponatimeforever.github.io/2013/12/29/part-1-frustrating-weird-things-about-java-from-a-beginner-java-coder"/>
   <updated>2013-12-29T00:00:00-08:00</updated>
   <id>http://onceuponatimeforever.github.io/2013/12/29/part-1-frustrating-weird-things-about-java-from-a-beginner-java-coder</id>
   <content type="html">
&lt;p&gt;I’m currently learning Java at work. Going from a language like Python to a pure object-oriented langage like Java has been quite an adjustment to a different mode of thinking and coding. Java has a lot of quirks. Along my learning journey, I’m getting familiar with Eclipse shortcuts.&lt;/p&gt;

&lt;p&gt;Here’s a summary of some strange aspects of Java that I’ve learned this week:&lt;br /&gt;
“this” in #Java can be both used when calling a variable and when calling a constructor. The call to the constuctor using “this” must be placed at the very beginning inside the class that which you’re calling the constructor from.
The String is not 1 of the 8 native primitives. String is a class. 
New types of classes: public, private, etc.
Strings are IMMUTABLE. What?! Let me demonstrate string builder and string formatting: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;java
// String Builder and String Formatting
// This is a VERY Inefficient program below.
String info =””;
info += &quot;My name is Bob.&quot;;
info += ””;
info += &quot;I am a builder.&quot;;
System.out.println(info);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This above is a BAD program. The variable &lt;code&gt;info&lt;/code&gt; is set to an empty string and will be an empty string for the rest of its life in the program. Then, we’re making an empty string. Then, every time we assign &lt;code&gt;info&lt;/code&gt;, we’re actually making a whole new string. Therefore, we’re increasing space and using memory.
Thus, we have String Builders. Here’s a revised re-write of the above program:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java
StringBuilder sb = new StringBuilder(””);
sb.append(&quot;My name is Sue.&quot;);
sb.append(&quot; &quot;);
sb.append(&quot;I am a lion tamer.&quot;);
System.out.println(sb.toString());
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The whole point of String Builder is to give a memory-efficient way to build string text. The append method returns a reference to the string builder itself. It’s possible to use method chaining, which is far more efficient and clean. The best version is below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java
StringBuilder s = new StringBuilder();
s.append(&quot;My name is Roger.&quot;).append(””).append(&quot;I am a sky diver.&quot;);
System.out.println(s.toString());
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That’s all for String Builders.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing the Right Version of Numpy</title>
   <link href="http://onceuponatimeforever.github.io/2013/12/29/installing-the-right-version-of-numpy"/>
   <updated>2013-12-29T00:00:00-08:00</updated>
   <id>http://onceuponatimeforever.github.io/2013/12/29/installing-the-right-version-of-numpy</id>
   <content type="html">
&lt;p&gt;I once had trouble installing the correct version of numpy in order to get sklearn working. I found a quick solution:
On the python terminal, do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;»import numpy
»print(numpy)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should print the location of the current numpy installation. Delete the folder where numpy is stored. Then, do a re-install of numpy with that correct version. Then, do print(numpy) again and you should see the correct location of numpy. You can also check by typing &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;»print numpy.__version__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This prints the version of numpy in your envrionment. Once the correct version of numpy is running in your environment, then importing sklearn should produce no errors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;» import sklearn
»
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stack OverFlow Reference: http://stackoverflow.com/questions/12436979/how-to-fix-python-numpy-pandas-installation&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Install CTags Plugin In Sublime Text</title>
   <link href="http://onceuponatimeforever.github.io/2013/12/29/how-to-install-ctags-plugin-in-sublime-text-2"/>
   <updated>2013-12-29T00:00:00-08:00</updated>
   <id>http://onceuponatimeforever.github.io/2013/12/29/how-to-install-ctags-plugin-in-sublime-text-2</id>
   <content type="html">
&lt;p&gt;If you’re working on a codebase that has more than a hundred lines of code, you should find tools that help you navigate large codebases. There’s the
global search function on every text editor. That can be useful for looking up text in the code.&lt;/p&gt;

&lt;p&gt;An even better tool is to get inside the initial function declarations. So, I use Sublime Text with CTags installed. CTags will make working in a very large
codebase a lot easier. It allows you to see where function definitions are. It’s an essential tool if you’re using Sublime Text.&lt;/p&gt;

&lt;p&gt;Install CTags using the Sublime’s package installer. To install CTag, type SHIFT+COMMAND+P and then “install package” in the pop-up search
bar. A pop-up menu should appear and you can type in “Ctags”. Press enter to install CTags plugin. Now you have the Sublime package CTags installed.&lt;/p&gt;

&lt;p&gt;In your command terminal, &lt;code&gt;cd&lt;/code&gt; into your current project, and now type the following to generate ctags, which are &lt;code&gt;.tags&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ctags -R -f .tags&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If that above command produces an error message of the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ctags: illegal option — R usage: ctags [-BFadtuwvx] [-f tags file] file …&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, do &lt;code&gt;brew install ctags&lt;/code&gt; on the terminal, and type in the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;alias ctags=”`brew —prefix`/bin/ctags”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The default key bindings should now work. See https://github.com/SublimeText/CTags for more information.&lt;/p&gt;

&lt;p&gt;For more help on installing CTags if you’re on a MacOX, see these blogs:
http://gmarik.info/blog/2010/10/08/ctags-on-OSX
http://mattpolito.info/post/1648956809/ctags-got-you-down&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to apply a patch attached to a ticket in a FOSS project.</title>
   <link href="http://onceuponatimeforever.github.io/2013/12/29/how-to-apply-a-patch-attached-to-a-ticket-in-a-foss-project"/>
   <updated>2013-12-29T00:00:00-08:00</updated>
   <id>http://onceuponatimeforever.github.io/2013/12/29/how-to-apply-a-patch-attached-to-a-ticket-in-a-foss-project</id>
   <content type="html">
&lt;p&gt;Sometimes, contributors to an open-source project are kind enough to attach patches to a ticket.
You’re working on a ticket that already contains a patch, which is a diff of the development branch against the upstream master branch.&lt;/p&gt;

&lt;p&gt;What do you do with the tickets that already have patches attached to them? As part of the regular workflow, you create a new git branch, usually named after the ticket name, before you start working on that development branch. After you have your new local git branch, the next step is to apply the existing patch(es). Here’s one workflow of how to apply a patch:&lt;/p&gt;

&lt;p&gt;Steps to take when applying a patch:
1. Create an empty .patch file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
» Touch file.patch
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the patch directly from the url link into that empty patch file you’ve created. I’m usong a django patch as an example.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;
» curl https://code.djangoproject.com/raw-attachment/ticket/99999/my_patch.diff &amp;gt; file.patch
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;cd into the directory where the patch refers to. Use git to apply the patch.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;
» git am file.patch.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See this guide for additional reference: http://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/&lt;/p&gt;

&lt;p&gt;Did you get any errors when you run that above command? If not, then you have now successfully applied an existing patch.&lt;/p&gt;

&lt;p&gt;There’s a chance that the patch may not apply 100% correctly. Sadly, that means you’ll have to manually apply those patches. This unfortunate situation
is usually true for very old patches. Then, git gets confused on which line numbers to apply the patches to. That is especially true when the upstream master
codebase has been dramatically updated or if the pach has aged considerably. As a result, there may be hunks that do not get applied cleanly into the
existing codebase.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Annoying Small Fact about JSP Syntax</title>
   <link href="http://onceuponatimeforever.github.io/2013/12/29/annoying-small-fact-about-jsp-syntax"/>
   <updated>2013-12-29T00:00:00-08:00</updated>
   <id>http://onceuponatimeforever.github.io/2013/12/29/annoying-small-fact-about-jsp-syntax</id>
   <content type="html">
&lt;p&gt;When creating a new variable, I do the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;c:set var=&quot;isFromCC-Entry&quot; value=true /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;JSP templating system doesn’t recognize the punctuation “-“. When I get the output of
&lt;code&gt;${isFromCCEntry}&lt;/code&gt;, I expect the output to be &lt;code&gt;true&lt;/code&gt;, but however, I get the following printed error on the page:  0.&lt;/p&gt;

&lt;p&gt;The solution is to remove the dash “-“, like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;c:set var=&quot;isFromCCEntry&quot; value=true /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a syntax problem in JSP templates.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Command Not Found</title>
   <link href="http://onceuponatimeforever.github.io/2013/12/29/-bash-command-not-found"/>
   <updated>2013-12-29T00:00:00-08:00</updated>
   <id>http://onceuponatimeforever.github.io/2013/12/29/-bash-command-not-found</id>
   <content type="html">
&lt;p&gt;Do you ever get this error where you try to call a python module?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;django-admin.py startproject name_of_app
    -bash: django-admin.py Command not found&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This problem arises because django-admin.py file not being included properly in the PYTHON path in the .profile. I’m sure you’ll find other guides that talk about how to include the correct path to django-admin.py into the PYTHON path. However, I’m here to present a much hackier temporary solution.&lt;/p&gt;

&lt;p&gt;The simplest get-it-to-work-asap solution is to find the files where the django-admin.py is located. This is where the &lt;code&gt;find&lt;/code&gt; unix command comes in handy.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo find / -name django-admin.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will see that the output is a bunch of file paths where django-admin.py, the command not found, is located. Pick one of the file paths and then run
the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/path/to/file/django-admin.py startproject name_of_app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And now you have created a Django app. Congrats.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://onceuponatimeforever.github.io/lessons/2011/12/29/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00-08:00</updated>
   <id>http://onceuponatimeforever.github.io/lessons/2011/12/29/jekyll-introduction</id>
   <content type="html">
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we&amp;rsquo;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;ldquo;a simple, blog aware, static site generator&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you&amp;rsquo;ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content &amp;ldquo;objects&amp;rdquo; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post&amp;rsquo;s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy &amp;ldquo;set&amp;rdquo;.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;ldquo;lessons/beginner&amp;rdquo;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won&amp;rsquo;t find &amp;ldquo;lessons&amp;rdquo; and &amp;ldquo;beginner&amp;rdquo; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;rsquo;s or post&amp;rsquo;s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site&amp;rsquo;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another &amp;ldquo;root&amp;rdquo; layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can&amp;rsquo;t do jackshit in liquid that hasn&amp;rsquo;t been allowed explicitly by the implementation.
What&amp;rsquo;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;rsquo;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It&amp;rsquo;s really unnecessary
&lt;em&gt;from a programmer&amp;rsquo;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I&amp;rsquo;ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;rsquo;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;rsquo;s job is to generate a static representation of your website.
The following is an outline of how that&amp;rsquo;s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;ldquo;liquified&amp;rdquo;.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are &amp;ldquo;rendered&amp;rdquo;, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;rsquo;ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []()
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you&amp;rsquo;d like.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>